#+TITLE : Various packages config file emacs
#+AUTHOR : DUREL Enzo
#+EMAIL : enzo.durel@gmail.com

* projectile

#+begin_src emacs-lisp 
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1))  
#+end_src

* smartparens

Smart Parens mode, autocomplete items pairs ex: "", (), ''...

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode t)

    (sp-pair "'" nil :actions :rem)
    (sp-pair "`" nil :actions :rem)
    (setq sp-highlight-pair-overlay nil))

  (global-set-key (kbd "C-c r") 'sp-rewrap-sexp)
  (global-set-key (kbd "C-c s") 'sp-splice-sexp)
  (global-set-key (kbd "C-c f") 'sp-forward-sexp)
  (global-set-key (kbd "C-c b") 'sp-backward-sexp)

  (defun indent-between-pair (&rest _ignored)
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))

  (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
#+end_src

* beacon

highlight cursor when changing window

#+begin_src emacs-lisp
  (use-package beacon
    :ensure
    :diminish
    :config
    (setq beacon-blink-delay 0.1)
    (setq beacon-blink-duration 0.25)
    (setq beacon-size 20))
  (beacon-mode 1) ;; uncomment to activate

#+end_src

* macros

Load macros lisp files

#+begin_src emacs-lisp
  ;; (load-file "~/.emacs.d/mes_macros.el")
#+end_src
 
* undo-tree
 
Arborescence des contrôles effectuer

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)
      (setq undo-tree-auto-save-history nil))
    )
#+end_src
   
* which-key

Print all keys available when press a special key (SPC, C, M...)

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode)
    :diminish)
#+end_src
 
* ace-link

#+begin_src emacs-lisp
  (use-package ace-link
    :config
    (ace-link-setup-default))
#+end_src

* ace-window

Package to move between frames with letters or numbers draw in top left
corner of the frame.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init (progn (global-set-key [remap other-window] 'ace-window))
    :diminish) 

  (global-set-key (kbd "M-o") 'ace-window)
  (setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src

* avy

search and go to a or many characters visually displayed in frames.

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :diminish)
#+end_src

* mark-multiple

mark the next occurence of selected text

#+begin_src emacs-lisp
  (use-package mark-multiple
    :ensure t
    ;; :bind ("C-c q" . 'mark-next-like-this)
    )
#+end_src    
    
* yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    ;; :hook (prog-mode . yas-minor-mode) ;; only in prog mode
    :config
    (yas-reload-all)
    (yas-global-mode 1) ;; global mode
    (setq yas-triggers-in-field t) ;; call snippets in snippets
    )

  (use-package yasnippet-snippets ;; a pack of snippets
    :diminish)
#+end_src

* vertico

#+begin_src emacs-lisp
  (use-package vertico

    ;;charger les extensions de vertico
    :load-path "straight/build/vertico/extensions"
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :config

    ;; Prefix the current candidate with “» ”. From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    (advice-add #'vertico--format-candidate :around
                (lambda (orig cand prefix suffix index _start)
                  (setq cand (funcall orig cand prefix suffix index _start))
                  (concat
                   (if (= vertico--index index)
                       (propertize "» " 'face 'vertico-current)
                     "  ")
                   cand)))

    ;;pour activer vertico directory (remonte d'un dossier à chaque fois, pratique ! )
    (require 'vertico-directory)
    ;; (define-key vertico-map [remap backward-kill-word] #'vertico-directory-up)
    ;; (define-key vertico-map [remap xah-delete-backward-char-or-bracket-text] #'vertico-directory-up)
    (define-key vertico-map [remap open-line] #'vertico-directory-up)
    ;; (define-key vertico-map [remap delete-backward-char] #'vertico-directory-up)

    ;; pour pouvoir jump à une entrée
    ;; (define-key vertico-map [remap avy-goto-char] #'vertico-quick-jump)

    (with-eval-after-load 'avy

      (defun divide-list-in-two-equal-part (lst)
        (let ((len (length lst)))
          (list (seq-subseq lst 0 (/ len 2))
                (seq-subseq lst (/ len 2)))))

      (setq avy-keys-alist-two-part (divide-list-in-two-equal-part (mapconcat 'char-to-string '(?\ ?e ?u ?i ?a ?s ?t ?r ?n) "")))

      ;; lorsqu'il y a une touche
      (setq vertico-quick1 (car avy-keys-alist-two-part))
      ;; deux touches
      (setq vertico-quick2 (cadr avy-keys-alist-two-part))

      (require 'vertico-quick)
      (use-package vertico-quick
        :straight nil
        :after vertico
        :custom (test 2)
        :bind (:map vertico-map
                    ("C-<return>" . vertico-quick-exit))))

    (vertico-mode))
#+end_src

* consult

#+begin_src emacs-lisp
  (use-package consult
    :config

    ;; ordre dans la commande consult-buffer
    (setq consult-buffer-sources
          '(consult--source-hidden-buffer
            consult--source-modified-buffer
            consult--source-buffer
            consult--source-bookmark
            consult--source-recent-file
            consult--source-file-register
            consult--source-project-buffer
            consult--source-project-recent-file))

    (setq completion-in-region-function #'consult-completion-in-region))
#+end_src

* fussy

Completion with a group of characters

#+begin_src emacs-lisp
  (use-package fussy
    :ensure t
    :config
    (push 'fussy completion-styles)
    (setq
     ;; For example, project-find-file uses 'project-files which uses
     ;; substring completion by default. Set to nil to make sure it's using
     ;; flx.
     completion-category-defaults nil
     completion-category-overrides nil))
#+end_src

* ivy

#+begin_src emacs-lisp
  ;; Chargement des packages Ivy, Counsel et Swiper
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t)

  ;; Correct swiper slow
  (setq swiper-use-visual-line nil)
  (setq swiper-use-visual-line-p (lambda (a) nil))

  ;; Configuration supplémentaire d'Ivy
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")

  ;; Utilisation de Counsel pour certaines commandes Emacs
  (counsel-mode 1)
#+end_src

* org ai

AI for orgmode, not working because openai needs money :-) (free api trial expired)

#+begin_src emacs-lisp
  ;; (straight-use-package
  ;;  '(org-ai :type git :host github :repo "rksm/org-ai"
  ;;           :local-repo "org-ai"
  ;;           :files ("*.el" "README.md" "snippets")))

  ;; (use-package org-ai
  ;;   :straight (:type git :host github :repo "rksm/org-ai" :local-repo "org-ai" :files ("*.el" "README.md" "snippets")))

  ;; (setq org-ai-openai-api-token "")
#+end_src

* citeproc

Package for use custom csl bibliography org export

#+begin_src emacs-lisp
    (use-package citeproc
      :ensure t)
#+end_src
